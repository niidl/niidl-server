version: '3'

services:
  nodejs:
    build:
      context: .
      dockerfile: Dockerfile
      network: host
    image: nodejs
    container_name: nodejs
    restart: unless-stopped
    networks:
      - app-network
    environment:
      - DATABASE_URL:${DATABASE_URL}
      - GITHUB_ACCESS_TOKEN:${GITHUB_ACCESS_TOKEN}
      - AWS_ACCESS_KEY_ID:${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY:${AWS_SECRET_ACCESS_KEY}

  webserver:
    image: nginx:mainline-alpine
    container_name: webserver
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - web-root:/var/www/html
      - ./nginx-conf:/etc/nginx/conf.d
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - dhparam:/etc/ssl/certs
    depends_on:
      - nodejs
    networks:
      - app-network

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - web-root:/var/www/html
    depends_on:
      - webserver
    command: certonly --webroot --webroot-path=/var/www/html --email ${EMAIL} --agree-tos --no-eff-email --force-renewal -d niidl.net  -d www.niidl.net

  postgres:
    image: postgres
    container_name: postgres
    restart: unless-stopped
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network

volumes:
  certbot-etc:
  certbot-var:
  web-root:
    driver: local
    driver_opts:
      type: none
      device: /home/niidl/niidl-server/views/
      o: bind
  dhparam:
    driver: local
    driver_opts:
      type: none
      device: /home/niidl/niidl-server/dhparam/
      o: bind
  postgres-data:

networks:
  app-network:
    driver: bridge
